#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  s87notify
#  
#  Copyright 2012 Silvano Wegener <silvano@DV8000>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
# 
import os, sys, json, time, re
sys.path.append('/opt/s87/bin/lib')
sys.path.append('/opt/s87/config')
from s87notifymethods import *
import log
import system
import basic
import mail




class NormalToHigh_Event(object):
    def __init__(self, valueName, getValueMethod, normal, max, againTime, mailMethod, config, mailServer, kind, *eventMethodsToRun):
        self.config = config
        self.mailServer = mailServer
        self.sendMail = mailMethod
        self.valueName = valueName
        self.getValue = getValueMethod
        self.maxValue = max
        self.normalValue = normal
        self.eventInAction = False
        self.eventInActionStartTime = False
        self.againTime = againTime
        self.eventMethods = eventMethodsToRun
        self.valueKind = kind

    def run(self):
        values = self.getValue(self.valueName)
        if not self.eventInAction:
			
            for value in values:
                if value >= self.maxValue:
                    subject = basic.HOSTNAME + ': ' + self.valueName + ' high!'
                    message = self.valueName + ': ' + str(value) + self.valueKind
                    self.sendMail(config, mailServer, subject, message)
                    for method in self.eventMethods:
                        method() 
                    self.eventInAction = True
                    self.eventInActionStartTime = self.getTime()
        else:
            for value in values:
                if value <= self.normalValue:
                    subject = basic.HOSTNAME + ': ' + self.valueName + ' normal.'
                    message = self.valueName + ': ' + str(value) + self.valueKind
                    self.sendMail(config, mailServer, subject, message)               
                    self.eventInAction = False

            if self.getTime()-self.eventInActionStartTime >= self.againTime:
                self.eventInAction = False
        
    def getTime(self):
        return time.mktime(time.localtime())
        
class High_Event(object):
    def __init__(self, valueName, getValueMethod, high, againTime, mailMethod, config, mailServer, kind, *eventMethodsToRun):
        self.config = config
        self.mailServer = mailServer
        self.sendMail = mailMethod
        self.valueName = valueName
        self.getValue = getValueMethod
        self.highValue = high
        self.eventInAction = False
        self.eventInActionStartTime = False
        self.againTime = againTime
        self.eventMethods = eventMethodsToRun
        self.valueKind = kind

    def run(self):
        value = self.getValue()
        if not self.eventInAction:
            if value >= self.maxValue:
                subject = basic.HOSTNAME + ': ' + self.valueName + ' WARNING!'
                message = self.valueName + ': ' + str(value) + self.valueKind
                self.sendMail(config, mailServer, subject, message)
                for method in self.eventMethods:
                    method() 
                self.eventInAction = True
                self.eventInActionStartTime = self.getTime()
        else:
            if self.getTime()-self.eventInActionStartTime >= self.againTime:
                self.eventInAction = False
        
    def getTime(self):
        return time.mktime(time.localtime())

class Low_Event(object):
    def __init__(self, valueName, getValueMethod, low, againTime, mailMethod, config, mailServer, kind, *eventMethodsToRun):
        self.config = config
        self.mailServer = mailServer
        self.sendMail = mailMethod
        self.valueName = valueName
        self.getValue = getValueMethod
        self.lowValue = low
        self.eventInAction = False
        self.eventInActionStartTime = False
        self.againTime = againTime
        self.eventMethods = eventMethodsToRun
        self.valueKind = kind

    def run(self):
        value = self.getValue()
        if not self.eventInAction:
            if value <= self.maxValue:
                subject = basic.HOSTNAME + ': ' + self.valueName + ' WARNING!'
                message = self.valueName + ': ' + str(value) + self.valueKind
                self.sendMail(config, mailServer, subject, message)
                for method in self.eventMethods:
                    method() 
                self.eventInAction = True
                self.eventInActionStartTime = self.getTime()
        else:
            if self.getTime()-self.eventInActionStartTime >= self.againTime:
                self.eventInAction = False
        
    def getTime(self):
        return time.mktime(time.localtime())

class FileChange_Event(object):
    def __init__(self, path, mailMethod, config, mailServer, *eventMethodsToRun):
        self.config = config
        self.mailServer = mailServer
        self.sendMail = mailMethod
        self.path = path
        if os.path.isfile(path):
            self.md5 = None
            self.oldmd5 = None
        elif os.path.isdir(path):
            self.md5 = {}
            self.oldmd5 = {}            
        self.eventMethods = eventMethodsToRun

    def run(self):
        if os.path.isfile(self.path):
            self.oldmd5 = self.md5
            self.md5 = os.popen('md5sum ' + self.path).read()[:32]
            if not self.md5 == self.oldmd5:
                subject = basic.HOSTNAME + ': File changed: ' + self.path
                message = 'changed from:\n '+str(self.oldmd5)+'\nto:\n '+ self.md5
                self.sendMail(config, mailServer, subject, message)
                
                
        elif os.path.isdir(self.path):
            self.oldmd5 = self.md5.copy()

            for entry in os.listdir(self.path):
                path = os.path.join(self.path, entry)
                
                if os.path.isfile(path):
                    self.md5[path] = os.popen('md5sum ' + path).read()[:32]
                    try:
                        if not self.md5[path] == self.oldmd5[path]:
                            subject = basic.HOSTNAME + ': File changed: ' + path
                            message = 'changed from:\n '+str(self.oldmd5[path])+'\nto:\n '+ self.md5[path]
                            self.sendMail(config, mailServer, subject, message)                            
                    except KeyError:
                        pass
                time.sleep(0.025)

class HDDFreeSpaceLow_Event(object):
    def __init__(self, mointPoint, MBLowValue, againTime, mailMethod, config, mailServer, *eventMethodsToRun):
        self.config = config
        self.mailServer = mailServer
        self.sendMail = mailMethod
        self.mointPoint = mointPoint
        self.againTime = againTime
        self.MBLowValue = MBLowValue
        self.eventMethods = eventMethodsToRun
        self.eventInAction = False
        self.eventInActionStartTime = False

    def run(self):
        mointPointInfos = VALUEGETTER.get('HDDFREESPACE')
        try:
            if not self.eventInAction:
                if mointPointInfos[self.mointPoint]['free'] <= self.MBLowValue:
                    subject = basic.HOSTNAME + ': HDD low free space: ' + self.mointPoint
                    message = self.mointPoint + ':\n' + json.dumps(mointPointInfos[self.mointPoint], indent=4)
                    print subject
                    print message
                    self.sendMail(config, mailServer, subject, message)
                    self.eventInAction = True
                    self.eventInActionStartTime = self.getTime()
            else:
                if self.getTime()-self.eventInActionStartTime >= self.againTime:
                    self.eventInAction = False               
        except KeyError:
            return False



    def getTime(self):
        return time.mktime(time.localtime())


class GetValue(object):
    def __init__(self):
        pass
        
    def get(self, valueName):
        return getattr(self, valueName)()

    def CPULOAD(self):
        uptime = os.popen('uptime').read()
        reFloat = re.compile(r'\d\.\d\d')
        loadAvg = reFloat.findall(uptime)       
        return (float(loadAvg[0]),)
    
    def SYSTEMTEMPERATURES(Self):
        sensors = os.popen('sensors').read()
        reFloat = re.compile(r'\d\d\.\d°C ')
        temps = reFloat.findall(sensors)
        outTemps = []
        for temp in temps:
            outTemps.append(float(temp.replace('°C ','')))
        return outTemps
    
    def HDDFREESPACE(self):
        df = os.popen('df -B M').readlines()
        df = df[1:]
        mountPoints = {}
        for mount in df:
            mountPoint = {}
            mount = mount.replace(os.linesep,'').split()
            mountPoint['device'] = mount[0]
            mountPoint['capacity'] = int(mount[1].replace('M',''))
            mountPoint['used'] = int(mount[2].replace('M',''))
            mountPoint['used%'] = int(mount[4].replace('%',''))
            mountPoint['free'] = int(mount[3].replace('M',''))
            mountPoints[mount[5]] = mountPoint
        return mountPoints











VALUEGETTER	= GetValue()
PROCESSNAME	= os.path.split(sys.argv[0])[1]
config		= basic.configReader.readConfig('/opt/s87/config/s87notify.conf')
mailServer	= mail.MailQueue(config['smtpConfig']['mailServer'], config['smtpConfig']['smtpUser'], basic.decrypt(basic.getHostKey(), config['smtpConfig']['password']))    
logging		= log.LogFile(PROCESSNAME, '/tmp/' + PROCESSNAME + '.log', config['logLevel'])

def email(config, mailServer, subject, message):
    mailServer.addMail(config['smtpConfig']['smtpUser'], config['smtpConfig']['smtpUser'], subject, message)
    logging.info('send mail: '+ subject)





try:
    if sys.argv[1] == '--dailyHDD':
        outLines = getHDDInfo()
        content = 'Current HDD values:\n\n'
        content +=  os.linesep.join(outLines) 
        email(config, mailServer, hostName + ': Daily HDD info', content.replace(' ','.'))
        mailServer.send()
        sys.exit()
except IndexError:
    pass





events = []
events.append( NormalToHigh_Event('SYSTEMTEMPERATURES', VALUEGETTER.get, 40.0, 60.0, 60, email, config, mailServer, ' C') )
events.append( NormalToHigh_Event('CPULOAD', VALUEGETTER.get, 0.66, 1.00, 300, email, config, mailServer, '') )
events.append( FileChange_Event('/etc/shorewall', email, config, mailServer) )
events.append( HDDFreeSpaceLow_Event('/mnt/2000GB', 1024, 3600, email, config, mailServer) )

logging.info(PROCESSNAME + ' started.')
try:
    while True:
        for event in events:
            event.run()
        mailServer.send()
        time.sleep(2)
            
except KeyboardInterrupt:
    logging.info(PROCESSNAME + ' stopped by user.')
    sys.exit()
