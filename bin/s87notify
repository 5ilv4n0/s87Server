#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  s87notify
#  
#  Copyright 2012 Silvano Wegener <silvano@DV8000>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
# 
import os, sys, json, time, re
sys.path.append('/opt/s87/bin/lib')
import log
import system
import basic
import mail


def renewConfig(filePath):
    config = basic.configReader.readConfig(filePath)
    if os.path.isfile('/opt/s87/DEBUG'):
        config['logLevel'] = 99    
    return config

PROCESSNAME = os.path.split(sys.argv[0])[1]
hostName = basic.HOSTNAME
config = renewConfig('/opt/s87/config/s87notify.conf')
#config = basic.configReader.readConfig('/opt/s87/config/s87notify.conf')

mailServer = mail.MailQueue(config['smtpConfig']['mailServer'], config['smtpConfig']['smtpUser'], basic.decrypt(basic.getHostKey(), config['smtpConfig']['password']))    

if os.path.isfile('/opt/s87/DEBUG'):
    config['logLevel'] = 99
logging = log.LogFile(PROCESSNAME, '/tmp/' + PROCESSNAME + '.log', config['logLevel'])



def email(config, mailServer, subject, message):
    mailServer.addMail(config['smtpConfig']['smtpUser'], config['smtpConfig']['smtpUser'], subject, message)


def getCPUCurrentCriticalTemp():
    cpuTemp = os.popen('sensors').read()
    temp = cpuTemp.split(os.linesep)[2]
    current, critical = re.match(r'temp1:.+\+(\d+\.\d).+\(crit.+\+(\d+\.\d).+',temp).groups()
    current = float(current)
    critical = float(critical)
    return current, critical


def getHDDInfo():
    content = os.popen('df -h | grep /dev/').read()
    outLines = []
    for entry in content.split(os.linesep):
        if not entry == '':
            lEntry = entry.split()
            if lEntry[5] in config['mountPoints']:
                outLines.append(str(lEntry[5].ljust(40,' ') + ' ' + lEntry[4].rjust(4,' ') + ' ' + '[' + lEntry[3] + ' free]'))
    return outLines







try:
    if sys.argv[1] == '--dailyHDD':
        outLines = getHDDInfo()
        content = 'Current HDD values:\n\n'
        content +=  os.linesep.join(outLines) 
        email(config, mailServer, hostName + ': Daily HDD info', content.replace(' ','.'))
        mailServer.send()
        sys.exit()
except IndexError:
    pass




tempWarningSended = 0
tempAlertSended = 0
loadWarning = 0
counter = 0

hddInfo = getHDDInfo()
counterHDD = {}
for hdd in hddInfo:
    counterHDD[hdd] = 0


logging.info(PROCESSNAME + ' started.')
try:
    while True:


        currentCPUTemp, criticalCPUTemp = getCPUCurrentCriticalTemp()
        if currentCPUTemp > criticalCPUTemp - 10:
            if tempAlertSended == 0:
                content = 'CPU Temperature very high! \n\nCurrent:   '+ str(currentCPUTemp)+'C\nCritical:   '+str(criticalCPUTemp)+'C'
                email(config, mailServer, hostName + ': CPU Temperature ALERT!', content)
                tempAlertSended = 1
        if currentCPUTemp > criticalCPUTemp - 20:
            if tempWarningSended == 0 and tempAlertSended == 0:
                content = 'CPU Temperature is rising! \n\nCurrent:   '+ str(currentCPUTemp)+'C\nCritical:   '+str(criticalCPUTemp)+'C' 
                email(config, mailServer, hostName + ': CPU Temperature WARNING!', content)
                tempWarningSended = 1
        if tempAlertSended == 1 or tempWarningSended == 1:
            if currentCPUTemp < criticalCPUTemp - 30:
                tempAlertSended = 0
                tempWarningSended = 0
                content = 'CPU Temperature OK again! \n\nCurrent:   '+ str(currentCPUTemp)+'C\nCritical:   '+str(criticalCPUTemp)+'C' 
                email(config, mailServer, hostName + ': CPU Temperature OK!', content)



        hddInfo = getHDDInfo()
        for hdd in hddInfo:
            r = re.match(r'.+[ ]+(\d+)%.+', hdd)
            if not r == None:
                percentInUse = int(r.groups()[0])
                if percentInUse > config['usedSpaceWarning']-1:
                    if counterHDD[hdd] == 0:
                        content = str('HDD nearly full! \n\n'+hdd).replace(' ','.')
                        email(config, mailServer, hostName + ': HDD nearly full!', content)
                else:
                    counterHDD[hdd] = 0


        cpuLoads = system.getCPULoad()
        if float(cpuLoads[0]) > 0.99:
            if loadWarning == 0:
                content = 'CPU load is high.\n\n' + json.dumps(cpuLoads)
                email(config, mailServer, hostName + ': CPU load high!', content)
                loadWarning = 1
        if float(cpuLoads[0]) < 0.67:
            loadWarning = 0



	
        
        for hdd in hddInfo:
            counterHDD[hdd] += 1
            if counterHDD[hdd] > 1800:
                counterHDD[hdd] = 0




        mailServer.send()
        time.sleep(2)
        counter += 1
        if counter > 1:
            counter = 0
            config = renewConfig('/opt/s87/config/s87notify.conf')
            
except KeyboardInterrupt:
    print 'exit'
    sys.exit()
