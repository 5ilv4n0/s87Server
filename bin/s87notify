#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  s87notify
#  
#  Copyright 2012 Silvano Wegener <silvano@DV8000>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
# 
import os, sys, json, time, re
sys.path.append('/opt/s87/bin/lib')
import log
import system
import basic
import mail

class NormalToHigh_Event(object):
    def __init__(self, valueName, getValueMethod, normal, max, againTime, mailMethod, config, mailServer, kind, *eventMethodsToRun):
        self.config = config
        self.mailServer = mailServer
        self.sendMail = mailMethod
        self.valueName = valueName
        self.getValue = getValueMethod
        self.maxValue = max
        self.normalValue = normal
        self.eventInAction = False
        self.eventInActionStartTime = False
        self.againTime = againTime
        self.eventMethods = eventMethodsToRun
        self.valueKind = kind

    def run(self):
        value = self.getValue()
        if not self.eventInAction:
            if value >= self.maxValue:
                subject = basic.HOSTNAME + ': ' + self.valueName + ' high!'
                message = self.valueName + ': ' + str(value) + self.valueKind
                self.sendMail(config, mailServer, subject, message)
                for method in self.eventMethods:
                    method() 
                self.eventInAction = True
                self.eventInActionStartTime = self.getTime()
        else:
            if value <= self.normalValue:
                subject = basic.HOSTNAME + ': ' + self.valueName + ' normal.'
                message = self.valueName + ': ' + str(value) + self.valueKind
                self.sendMail(config, mailServer, subject, message)               
                self.eventInAction = False
            if self.getTime()-self.eventInActionStartTime >= self.againTime:
                self.eventInAction = False
        
    def getTime(self):
        return time.mktime(time.localtime())
        
class High_Event(object):
    def __init__(self, valueName, getValueMethod, high, againTime, mailMethod, config, mailServer, kind, *eventMethodsToRun):
        self.config = config
        self.mailServer = mailServer
        self.sendMail = mailMethod
        self.valueName = valueName
        self.getValue = getValueMethod
        self.highValue = high
        self.eventInAction = False
        self.eventInActionStartTime = False
        self.againTime = againTime
        self.eventMethods = eventMethodsToRun
        self.valueKind = kind

    def run(self):
        value = self.getValue()
        if not self.eventInAction:
            if value >= self.maxValue:
                subject = basic.HOSTNAME + ': ' + self.valueName + ' WARNING!'
                message = self.valueName + ': ' + str(value) + self.valueKind
                self.sendMail(config, mailServer, subject, message)
                for method in self.eventMethods:
                    method() 
                self.eventInAction = True
                self.eventInActionStartTime = self.getTime()
        else:
            if self.getTime()-self.eventInActionStartTime >= self.againTime:
                self.eventInAction = False
        
    def getTime(self):
        return time.mktime(time.localtime())







def renewConfig(filePath):
    config = basic.configReader.readConfig(filePath)
    if os.path.isfile('/opt/s87/DEBUG'):
        config['logLevel'] = 9    
    return config

PROCESSNAME = os.path.split(sys.argv[0])[1]
hostName = basic.HOSTNAME
config = renewConfig('/opt/s87/config/s87notify.conf')
#config = basic.configReader.readConfig('/opt/s87/config/s87notify.conf')

mailServer = mail.MailQueue(config['smtpConfig']['mailServer'], config['smtpConfig']['smtpUser'], basic.decrypt(basic.getHostKey(), config['smtpConfig']['password']))    

if os.path.isfile('/opt/s87/DEBUG'):
    config['logLevel'] = 99
    
logging = log.LogFile(PROCESSNAME, '/tmp/' + PROCESSNAME + '.log', config['logLevel'])

def email(config, mailServer, subject, message):
    mailServer.addMail(config['smtpConfig']['smtpUser'], config['smtpConfig']['smtpUser'], subject, message)
    logging.info('send mail: '+ subject)

def getCPUCurrentCriticalTemp():
    cpuTemp = os.popen('sensors').read()
    temp = cpuTemp.split(os.linesep)[2]
    current, critical = re.match(r'temp1:.+\+(\d+\.\d).+\(crit.+\+(\d+\.\d).+',temp).groups()
    current = float(current)
    critical = float(critical)
    return current#, critical

def getHDDInfo():
    content = os.popen('df -h | grep /dev/').read()
    outLines = []
    for entry in content.split(os.linesep):
        if not entry == '':
            lEntry = entry.split()
            if lEntry[5] in config['mountPoints']:
                outLines.append(str(lEntry[5].ljust(40,' ') + ' ' + lEntry[4].rjust(4,' ') + ' ' + '[' + lEntry[3] + ' free]'))
    return outLines

try:
    if sys.argv[1] == '--dailyHDD':
        outLines = getHDDInfo()
        content = 'Current HDD values:\n\n'
        content +=  os.linesep.join(outLines) 
        email(config, mailServer, hostName + ': Daily HDD info', content.replace(' ','.'))
        mailServer.send()
        sys.exit()
except IndexError:
    pass





events = []
events.append( NormalToHigh_Event('CPU-Temperature', getCPUCurrentCriticalTemp, 40.0, 45.0, 60, email, config, mailServer, ' C') )


tempWarningSended = 0
tempAlertSended = 0
loadWarning = 0
#~ 
#~ hddInfo = getHDDInfo()
#~ counterHDD = {}
#~ for hdd in hddInfo:
    #~ counterHDD[hdd] = 0


logging.info(PROCESSNAME + ' started.')
try:
    while True:

#~ 
        #~ currentCPUTemp, criticalCPUTemp = getCPUCurrentCriticalTemp()
        #~ if currentCPUTemp > criticalCPUTemp - 10:
            #~ if tempAlertSended == 0:
                #~ content = 'CPU Temperature very high! \n\nCurrent:   '+ str(currentCPUTemp)+'C\nCritical:   '+str(criticalCPUTemp)+'C'
                #~ email(config, mailServer, hostName + ': CPU Temperature ALERT!', content)
                #~ tempAlertSended = 1
        #~ if currentCPUTemp > criticalCPUTemp - 20:
            #~ if tempWarningSended == 0 and tempAlertSended == 0:
                #~ content = 'CPU Temperature is rising! \n\nCurrent:   '+ str(currentCPUTemp)+'C\nCritical:   '+str(criticalCPUTemp)+'C' 
                #~ email(config, mailServer, hostName + ': CPU Temperature WARNING!', content)
                #~ tempWarningSended = 1
        #~ if tempAlertSended == 1 or tempWarningSended == 1:
            #~ if currentCPUTemp < criticalCPUTemp - 30:
                #~ tempAlertSended = 0
                #~ tempWarningSended = 0
                #~ content = 'CPU Temperature OK again! \n\nCurrent:   '+ str(currentCPUTemp)+'C\nCritical:   '+str(criticalCPUTemp)+'C' 
                #~ email(config, mailServer, hostName + ': CPU Temperature OK!', content)


#~ 
        #~ hddInfo = getHDDInfo()
        #~ for hdd in hddInfo:
            #~ r = re.match(r'.+[ ]+(\d+)%.+', hdd)
            #~ if not r == None:
                #~ percentInUse = int(r.groups()[0])
                #~ if percentInUse > config['usedSpaceWarning']-1:
                    #~ if counterHDD[hdd] == 0:
                        #~ content = str(hdd).replace(' ','.')
                        #~ email(config, mailServer, hostName + ': HDD capacity WARNING!', content)
                #~ else:
                    #~ counterHDD[hdd] = 0




        cpuLoads = system.getCPULoad()
        if float(cpuLoads[0]) > 0.99:
            if loadWarning == 0:
                content = 'CPU load is high.\n\n' + json.dumps(cpuLoads)
                email(config, mailServer, hostName + ': CPU load high!', content)
                loadWarning = 1
        if float(cpuLoads[0]) < 0.67:
            loadWarning = 0



	#~ 
        #~ 
        #~ for hdd in hddInfo:
            #~ counterHDD[hdd] += 1
            #~ if counterHDD[hdd] > 1800:
                #~ counterHDD[hdd] = 0



        for event in events:
            event.run()

        mailServer.send()
        time.sleep(2)
            
except KeyboardInterrupt:
    print 'exit'
    sys.exit()
