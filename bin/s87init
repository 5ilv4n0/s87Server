#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  system.py
#  
#  Copyright 2012 Silvano Wegener <silvano@DV8000>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  
import os, sys, json, re, time, subprocess

s87initCount =  os.popen('ps ax | grep s87init | grep -v grep | grep -v less | wc -l').read()
if int(s87initCount) > 1:
    sys.exit()
    
sys.path.append('/opt/s87/bin/lib')
sys.path.append('/opt/s87/config')
import log
import system
import basic
import mail
PROCESSNAME	= os.path.split(sys.argv[0])[1]
config		= basic.s87config[PROCESSNAME]
logging		= log.LogFile(PROCESSNAME, '/tmp/' + PROCESSNAME + '.log', config['logLevel'])
logging.info(PROCESSNAME + ' start...')






if basic.getConfigData(config, 'startFirewallOnInit'):
    try:
        command = config['firewallRestartCommand']
    except KeyError:
        command = 'echo "done."'
        
    logging.debug(PROCESSNAME + ' starting firewall with command "'+ command+'".')
    fwOut = os.popen(command+' 2>&1').read()
    log.logStringLines(logging.debug, PROCESSNAME + ' firewall: ', fwOut)
    if 'done.' in fwOut:
        logging.info(PROCESSNAME + ' firewall started.')
    elif 'Terminated' in fwOut:
        logging.warning(PROCESSNAME + ' firewall not started!')
    else:
        logging.warning(PROCESSNAME + ' firewall status unknown!')



try:
    hddStandbyTime = config['hddStandbyTime']
    try:
        excludedHardDisks = config['excludedDevices']
    except KeyError:
        excludedHardDisks = []
    for hardDisk in system.getHardDisks():
        if not hardDisk in excludedHardDisks:
            logging.info(PROCESSNAME + ' set standby time of <' + hardDisk + '> to ' + str(hddStandbyTime) + ' sec...')
            encodedStandByTime = int(hddStandbyTime)/5
            out = os.popen('hdparm -S '+ str(encodedStandByTime) + ' ' + hardDisk + ' 2>&1').read()
            if 'Permission denied' in out:
                logging.warning(PROCESSNAME + ' set standby time of <' + hardDisk + '> failed! Permission denied!')
            else:
                logging.debug(PROCESSNAME + ' standby time of <' + hardDisk + '> is now '+str(hddStandbyTime) + ' sec.')
except KeyError:
    pass



logging.info(PROCESSNAME + ' is running.')
try:
    while True:
        psax = system.getRunningProcesses()
        
        
        if basic.getConfigData(config, 'autoReconnect'):
            try:
                online = False
                try:
                    checkIPs = config['onlineCheckIPs']
                except KeyError:
                    checkIPs = ('8.8.8.8',)
                for ip in checkIPs:
                    if basic.ping(ip):
                        online = True
                        break
            except KeyError:
                online = False
            if system.existsPPPDevice() == False and online == False:
                if not 's87reconnect' in psax: 
                    logging.info(PROCESSNAME + ' reconnecting to internet...')
                    system.connect()
                    time.sleep(2)



        try:
            processes = config['initProcesses']
        except KeyError:
            processes = {}
        for process in processes.keys():
            if processes[process]:
                if not process in psax:
                    logging.debug(PROCESSNAME + ' starting ' + process)
                    logging.info(PROCESSNAME + ' ' + process + ' is not running. execute it.')
                    os.popen(process + ' &')  



        forceDisconnectTime = basic.getConfigData(config, 'forceDiscoTime')
        if time.strftime('%H:%M') == forceDisconnectTime:
            logging.info(PROCESSNAME + ' force disconnect at "'+ forceDisconnectTime +'". is disconnect time.')
            os.popen('/opt/s87/bin/s87reconnect' + ' &')


        time.sleep(5)
except KeyboardInterrupt:
    logging.info(PROCESSNAME + ' exit by user.')

