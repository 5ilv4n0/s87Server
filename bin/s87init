#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  system.py
#  
#  Copyright 2012 Silvano Wegener <silvano@DV8000>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  
import os, sys, json, re, time, subprocess



    
sys.path.append('/opt/s87/bin/lib')
sys.path.append('/opt/s87/config')
import log
import system
import basic
import mail
PROCESSNAME	= os.path.split(sys.argv[0])[1]
basic.ifProcessRunningThenExit(PROCESSNAME)
config = basic.s87config[PROCESSNAME]
logging = log.LogFile(PROCESSNAME, '/tmp/' + PROCESSNAME + '.log', config['logLevel'])
logging.info(PROCESSNAME + ' start...')


basic.startFirewallIfNeeded(PROCESSNAME, config, logging)
basic.setHDDStandbyTimeIfNeeded(PROCESSNAME, config, logging)






logging.info(PROCESSNAME + ' is running.')
try:
    while True:
        psax = system.getRunningProcesses()
        basic.autoReconnectIfNeeded(psax, config, PROCESSNAME, logging)


        try:
            processes = config['initProcesses']
        except KeyError:
            processes = {}
        for process in processes.keys():
            if processes[process]:
                if not process in psax:
                    logging.debug(PROCESSNAME + ' starting ' + process)
                    logging.info(PROCESSNAME + ' ' + process + ' is not running. execute it.')
                    os.popen(process + ' &')  


        basic.forceDisconnectTimeIfNeeded(psax, config, PROCESSNAME, logging)
        time.sleep(5)
except KeyboardInterrupt:
    logging.info(PROCESSNAME + ' exit by user.')

