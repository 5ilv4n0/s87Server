#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
#  system.py
#  
#  Copyright 2012 Silvano Wegener <silvano@DV8000>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  
import os, sys, json, re, time, subprocess
sys.path.append('/opt/s87/bin/lib')
sys.path.append('/opt/s87/config')
import log
import system
import basic
import mail
PROCESSNAME	= os.path.split(sys.argv[0])[1]
config		= basic.configReader.readConfig('/opt/s87/config/s87init.conf')
logging		= log.LogFile(PROCESSNAME, '/tmp/' + PROCESSNAME + '.log', config['logLevel'])
logging.info(PROCESSNAME + ' start...')


s87initCount =  os.popen('ps ax | grep s87init | grep -v grep | grep -v less | wc -l').read()
if int(s87initCount) > 1:
    sys.exit()



os.system(config['firewallRestartCommand'])

#SET DISKS IN FSTAB WITH UUID AND /MNT/ IN MOUNTPOINT TO 30SEC STANDBY TIME
fstab = os.popen('cat /etc/fstab').read().split(os.linesep)
translateUUID = os.popen('ls -l /dev/disk/by-uuid/').read().split(os.linesep)
for disc in fstab:
    if 'UUID' in disc and '/mnt/' in disc:
        disc = disc.split()
        for uuid in translateUUID:
            if disc[0].replace('UUID=','') in uuid:
                device = '/dev/' + str(uuid.split('/')[-1])[:-1]
                print 'set',device,'standby time to 30s.'
                os.popen('hdparm -S '+ str(config['hddStandbyTime']) + ' ' + device)






logging.info(PROCESSNAME + ' started.')
try:
    while True:

        if config['autoReconnect']:
            if not system.existsPPPDevice():
                logging.info(PROCESSNAME + ' reconnecting to internet...')
                system.connect()
        
        psax = system.getRunningProcesses()
        for process in config['initProcesses'].keys():
            if config['initProcesses'][process]:
                if not process in psax:
                    logging.info(PROCESSNAME + ' ' + process)
                    os.popen(process + ' &')                

        time.sleep(5)
except KeyboardInterrupt:
    print 'exit.'

